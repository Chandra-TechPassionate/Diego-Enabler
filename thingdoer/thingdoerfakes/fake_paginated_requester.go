// This file was generated by counterfeiter
package thingdoerfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/diego-enabler/api"
	"github.com/cloudfoundry-incubator/diego-enabler/thingdoer"
)

type FakePaginatedRequester struct {
	DoStub        func(filter api.Filter, params map[string]interface{}) ([][]byte, error)
	doMutex       sync.RWMutex
	doArgsForCall []struct {
		filter api.Filter
		params map[string]interface{}
	}
	doReturns struct {
		result1 [][]byte
		result2 error
	}
}

func (fake *FakePaginatedRequester) Do(filter api.Filter, params map[string]interface{}) ([][]byte, error) {
	fake.doMutex.Lock()
	fake.doArgsForCall = append(fake.doArgsForCall, struct {
		filter api.Filter
		params map[string]interface{}
	}{filter, params})
	fake.doMutex.Unlock()
	if fake.DoStub != nil {
		return fake.DoStub(filter, params)
	} else {
		return fake.doReturns.result1, fake.doReturns.result2
	}
}

func (fake *FakePaginatedRequester) DoCallCount() int {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return len(fake.doArgsForCall)
}

func (fake *FakePaginatedRequester) DoArgsForCall(i int) (api.Filter, map[string]interface{}) {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.doArgsForCall[i].filter, fake.doArgsForCall[i].params
}

func (fake *FakePaginatedRequester) DoReturns(result1 [][]byte, result2 error) {
	fake.DoStub = nil
	fake.doReturns = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

var _ thingdoer.PaginatedRequester = new(FakePaginatedRequester)
